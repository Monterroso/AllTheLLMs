
START SPECIFICATION:
# Technical Specification

## System Overview
The system is a Discord bot built using the Discraft framework. The bot is designed to interact with users through various commands and events, providing functionalities such as simulating long-running processes, displaying message and user information, testing latency, and handling errors gracefully. The bot leverages Discord's API to manage interactions and events within a server.

We're not using prisma, we're just using supabase as our orm.
You have an mcp server connected to our database instance. 
Make sure to utilize dotenv in order to access environmental variables.
Always start messages with a green checkmark

### Main Components and Their Roles
- **Commands**: Define and execute various slash and context menu commands.
- **Events**: Handle different Discord events such as message creation, errors, and client readiness.
- **Clients**: Manage the Discord client instance and its interactions.
- **Utils**: Provide utility functions, including logging.

## Core Functionality
### Primary Features and Their Implementation

1. **Command Execution**
   - **`commands/longcommand.ts`**: Simulates a long-running process using deferred replies and timed updates.
   - **`commands/messageinfo.ts`**: Displays detailed information about a message in an embed.
   - **`commands/ping.ts`**: Tests latency by replying with "Pong!".
   - **`commands/userinfo.ts`**: Shows detailed user information in an embed.

2. **Event Handling**
   - **`events/error.ts`**: Logs errors using the logger utility.
   - **`events/messageCreate.ts`**: Replies to specific messages and logs errors.
   - **`events/ready.ts`**: Sets the bot's presence upon client readiness.

3. **Client Initialization**
   - **`clients/discord.ts`**: Initializes the Discord client with necessary intents.

4. **Logging**
   - **`utils/logger.ts`**: Provides a logging utility using the `consola` library.

### Core Functions and Their Purposes
- **`execute` in `commands/longcommand.ts`**: Simulates a long-running process with deferred replies and updates.
- **`execute` in `commands/messageinfo.ts`**: Fetches and displays message details in an embed.
- **`execute` in `commands/ping.ts`**: Replies with "Pong!" to test latency.
- **`execute` in `commands/userinfo.ts`**: Fetches and displays user details in an embed.
- **`handler` in `events/error.ts`**: Logs errors.
- **`handler` in `events/messageCreate.ts`**: Replies to specific messages and logs errors.
- **`handler` in `events/ready.ts`**: Sets the bot's presence.
- **`client` in `clients/discord.ts`**: Initializes the Discord client.
- **`logger` in `utils/logger.ts`**: Provides logging functionality.

## Architecture
The system is structured to handle Discord interactions through commands and events. The core components interact as follows:

1. **Initialization**:
   - The bot initializes by loading environment variables and setting up the Discord client (`clients/discord.ts`).
   - The `index.ts` file registers commands and events, and logs the bot's start message.

2. **Command Registration and Execution**:
   - Commands are registered using the `registerCommands` function.
   - When a command is invoked, the corresponding `execute` function in the command file is called to perform the action.

3. **Event Handling**:
   - Events are registered using the `registerEvents` function.
   - When an event occurs (e.g., a message is created), the corresponding `handler` function in the event file is executed.

4. **Error Handling**:
   - Errors are logged using the `logger` utility defined in `utils/logger.ts`.
   - Uncaught exceptions and unhandled promise rejections are also logged for debugging purposes.

5. **Graceful Shutdown**:
   - The bot handles the SIGINT signal to perform a graceful shutdown, destroying the client and logging the process.

### Data Flow
- **Input**: User commands and messages.
- **Processing**: Commands and events are processed by their respective handlers.
- **Output**: Responses are sent back to the user, and logs are generated for debugging and monitoring.
END SPECIFICATION